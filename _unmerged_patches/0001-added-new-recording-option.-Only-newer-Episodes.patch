From 4e02e6ad21f5e290c5fec4f645e65e5c4d1d14a4 Mon Sep 17 00:00:00 2001
From: Stefan Priebe <stefan@prie.be>
Date: Sun, 6 Nov 2011 21:47:04 +0100
Subject: [PATCH] added new recording option. Only newer Episodes.

---
 .../Plugins/ConflictsManager/ConflictsManager.cs   |   36 ++++++
 .../TVLibrary/SetupTv/Sections/TvSchedules.cs      |    5 +
 TvEngine3/TVLibrary/TVDatabase/Program.cs          |  127 ++++++++++++++++++++
 TvEngine3/TVLibrary/TVDatabase/Schedule.cs         |   85 +++++++++++++-
 .../TVDatabase/TvBusinessLayer/BusinessLayer.cs    |   27 ++++
 .../TVLibrary/TvPlugin/TvPlugin/TVConflicts.cs     |    4 +
 .../TVLibrary/TvPlugin/TvPlugin/TVPriorities.cs    |   15 +++
 .../TVLibrary/TvPlugin/TvPlugin/TVProgramInfo.cs   |   17 ++-
 .../TVLibrary/TvPlugin/TvPlugin/TVScheduler.cs     |   15 ++-
 TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVSearch.cs  |   10 ++
 .../TvPlugin/TvPlugin/TvNewScheduleSearchType.cs   |    5 +-
 .../TvService/DiskManagement/EpisodeManagement.cs  |   24 ++++-
 .../TVLibrary/TvService/Scheduler/Scheduler.cs     |   36 ++++++
 .../MediaPortal.Base/language/strings_de.xml       |    1 +
 .../MediaPortal.Base/language/strings_en.xml       |    1 +
 15 files changed, 397 insertions(+), 11 deletions(-)

diff --git a/TvEngine3/TVLibrary/Plugins/ConflictsManager/ConflictsManager.cs b/TvEngine3/TVLibrary/Plugins/ConflictsManager/ConflictsManager.cs
index 21309b5..51a0fbb 100644
--- a/TvEngine3/TVLibrary/Plugins/ConflictsManager/ConflictsManager.cs
+++ b/TvEngine3/TVLibrary/Plugins/ConflictsManager/ConflictsManager.cs
@@ -156,6 +156,7 @@ namespace TvEngine
       getWorkingDaysSchedules(scheduleList, scheduleListToParse);
       getWeeklyEveryTimeOnThisChannelSchedules(scheduleList, scheduleListToParse);
       getEveryTimeOnEveryChannelSchedules(scheduleList, scheduleListToParse);
+      getEveryTimeOnEveryChannelOnlyNewerEpisodesSchedules(scheduleList, scheduleListToParse);
       getEveryTimeOnThisChannelSchedules(scheduleList, scheduleListToParse);
       removeCanceledSchedules(scheduleListToParse);
 
@@ -690,6 +691,41 @@ namespace TvEngine
     }
 
     /// <summary>
+    /// Gets the every time on every channel but only newer episodes
+    /// </summary>
+    /// <param name="schedulesList">The schedules list.</param>
+    /// <returns></returns>
+    private void getEveryTimeOnEveryChannelOnlyNewerEpisodesSchedules(IList<Schedule> schedulesList, IList<Schedule> refFillList)
+    {
+      foreach (Schedule schedule in schedulesList)
+      {
+        ScheduleRecordingType scheduleType = (ScheduleRecordingType)schedule.ScheduleType;
+        if (schedule.Canceled != Schedule.MinSchedule) continue;
+        if (scheduleType != ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes) continue;
+        IList<Program> programsList = Program.RetrieveEveryTimeOnEveryChannelOnlyNewerEpisodesSchedules(schedule.ProgramName, schedule.LastseriesNum, schedule.LastepisodeNum);
+
+        if (programsList != null)
+        {
+          foreach (Program program in programsList)
+          {
+            Schedule incomingSchedule = schedule.Clone();
+            incomingSchedule.IdChannel = program.IdChannel;
+            incomingSchedule.ProgramName = program.Title;
+            incomingSchedule.StartTime = program.StartTime;
+            incomingSchedule.EndTime = program.EndTime;
+            incomingSchedule.PreRecordInterval = schedule.PreRecordInterval;
+            incomingSchedule.PostRecordInterval = schedule.PostRecordInterval;
+            incomingSchedule.LastseriesNum = schedule.LastseriesNum;
+            incomingSchedule.LastepisodeNum = schedule.LastepisodeNum;
+            refFillList.Add(incomingSchedule);
+          } //foreach (Program _program in _programsList)
+        }
+      } //foreach (Schedule _Schedule in schedulesList)
+      foreach (Schedule sched in refFillList) schedulesList.Remove(sched);
+    }
+
+
+    /// <summary>
     /// Gets the Weekly every time on this channel schedules.
     /// </summary>
     /// <param name="schedulesList">The schedules list.</param>
diff --git a/TvEngine3/TVLibrary/SetupTv/Sections/TvSchedules.cs b/TvEngine3/TVLibrary/SetupTv/Sections/TvSchedules.cs
index 0c1d64c..36addfa 100644
--- a/TvEngine3/TVLibrary/SetupTv/Sections/TvSchedules.cs
+++ b/TvEngine3/TVLibrary/SetupTv/Sections/TvSchedules.cs
@@ -104,6 +104,11 @@ namespace SetupTv.Sections
             item.SubItems.Add("Always");
             item.SubItems.Add("All channels");
             break;
+          case ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+            item.ImageIndex = 0;
+            item.SubItems.Add("OnlyNewerEpisodes");
+            item.SubItems.Add("S"+schedule.LastseriesNum+"E"+schedule.LastepisodeNum);
+            break;
         }
         item.SubItems.Add(schedule.ProgramName);
         item.SubItems.Add(String.Format("{0} mins", schedule.PreRecordInterval));
diff --git a/TvEngine3/TVLibrary/TVDatabase/Program.cs b/TvEngine3/TVLibrary/TVDatabase/Program.cs
index e0a14ea..f270cde 100644
--- a/TvEngine3/TVLibrary/TVDatabase/Program.cs
+++ b/TvEngine3/TVLibrary/TVDatabase/Program.cs
@@ -465,6 +465,53 @@ namespace TvDatabase
       }
     }
 
+
+    /// <summary>
+    /// The programs series id
+    /// </summary>
+    public int SeriesNumAsInt
+    {
+      get
+      {
+        try
+        {
+          return Convert.ToInt32(seriesNum);
+        }
+        catch
+        {
+          return 0;
+        }
+      }
+      set
+      {
+        isChanged |= seriesNum != value.ToString();
+        seriesNum = value.ToString();
+      }
+    }
+
+    /// <summary>
+    /// The programs episode number from the distributor
+    /// </summary>
+    public int EpisodeNumAsInt
+    {
+      get
+      {
+        try
+        {
+          return Convert.ToInt32(episodeNum);
+        }
+        catch
+        {
+          return 0;
+        }
+      }
+      set
+      {
+        isChanged |= episodeNum != value.ToString();
+        episodeNum = value.ToString();
+      }
+    }
+
     /// <summary>
     /// The programs episode title from the distributor
     /// </summary>
@@ -688,6 +735,86 @@ namespace TvDatabase
       return ObjectFactory.GetCollection<Program>(stmt.Execute());
     }
 
+    public static string GetDateTimeString()
+    {
+      string provider = ProviderFactory.GetDefaultProvider().Name.ToLowerInvariant();
+      if (provider == "mysql")
+      {
+        return "yyyy-MM-dd HH:mm:ss";
+      }
+      return "yyyyMMdd HH:mm:ss";
+    }
+
+    public static string EscapeSQLString(string original)
+    {
+      string provider = ProviderFactory.GetDefaultProvider().Name.ToLowerInvariant();
+      if (provider == "mysql")
+      {
+        return original.Replace("\\", "\\\\").Replace("'", "\\'");
+      }
+      else
+      {
+        return original.Replace("\\", "\\\\").Replace("'", "''");
+      }
+    }
+
+    public static IList<Program> RetrieveEveryTimeOnEveryChannelOnlyNewerEpisodesSchedules(string title, int lastseriesNum, int lastepisodeNum)
+    {
+      IList<Program> data = new List<Program>();
+      String SqlSelectCommand;
+
+      if (lastseriesNum == 0 && lastepisodeNum == 0)
+      {
+        // we don't have any valid episodedata => select all
+        SqlSelectCommand = String.Format("SELECT * FROM Program WHERE Title = '{0}' AND startTime >= '{1}'",
+                                         EscapeSQLString(title), DateTime.Now.ToString(GetDateTimeString()));
+      }
+      else
+      {
+        SqlSelectCommand = String.Format("SELECT * FROM Program WHERE Title = '{0}' AND startTime >= '{1}' AND " +
+                                         "((SeriesNum = {2} AND EpisodeNum > {3}) OR (SeriesNum > {4}))",
+                                         EscapeSQLString(title), DateTime.Now.ToString(GetDateTimeString()),
+                                         lastseriesNum, lastepisodeNum, lastseriesNum);
+      }
+
+      SqlStatement stmt = new SqlBuilder(StatementType.Select, typeof(Program)).GetStatement(true);
+      SqlStatement mansql = new SqlStatement(StatementType.Select, stmt.Command, SqlSelectCommand.ToString(),
+                                                    typeof(Program));
+      IList<Program> data1 = ObjectFactory.GetCollection<Program>(mansql.Execute());
+
+      for (int i = 0; i < data1.Count; i++)
+      {
+        bool present = false;
+        // we only need to check for double episode if we have data
+        if (data1[i].EpisodeNumAsInt > 0 && data1[i].SeriesNumAsInt > 0)
+        {
+          for (int i2 = 0; i2 < data.Count; i2++)
+          {
+            // is this schedule already present? and do we have valid episodedata
+            if (data[i2].EpisodeNumAsInt == data1[i].EpisodeNumAsInt && data[i2].SeriesNumAsInt == data1[i].SeriesNumAsInt)
+            {
+              present = true;
+              Log.Debug("TVDB Program: RetrieveEveryTimeOnEveryChannelOnlyNewerEpisodesSchedules: detected double episode: {0} CHannel 1: {1} Channel 2: {2}",
+                data1[i].Title, data[i2].idChannel, data1[i].idChannel);
+              // earlier wins ;-) 
+              if (data1[i].StartTime < data[i2].StartTime)
+              {
+                // replace recording with the one which starts earlier
+                data[i2] = data1[i];
+              }
+              break;
+            }
+          }
+        }
+        if (!present)
+        {
+          data.Add(data1[i]);
+        }
+      }
+
+      return data;
+    }
+
     public static IList<Program> RetrieveWeeklyEveryTimeOnThisChannel(DateTime startTime, DateTime endTime, string title,
                                                                       int channelId)
     {
diff --git a/TvEngine3/TVLibrary/TVDatabase/Schedule.cs b/TvEngine3/TVLibrary/TVDatabase/Schedule.cs
index 61c95e0..bfa0bd6 100644
--- a/TvEngine3/TVLibrary/TVDatabase/Schedule.cs
+++ b/TvEngine3/TVLibrary/TVDatabase/Schedule.cs
@@ -43,7 +43,8 @@ namespace TvDatabase
     EveryTimeOnEveryChannel,
     Weekends,
     WorkingDays,
-    WeeklyEveryTimeOnThisChannel
+    WeeklyEveryTimeOnThisChannel,
+    EveryTimeOnEveryChannelOnlyNewerEpisodes
   }
 
   /// <summary>
@@ -81,6 +82,9 @@ namespace TvDatabase
     [TableColumn("recommendedCard", NotNull = true)] private int recommendedCard;
     [TableColumn("series", NotNull = true)] private bool series;
 
+    [TableColumn("lastepisodeNum", NotNull = true)] private int lastepisodeNum;
+    [TableColumn("lastseriesNum", NotNull = true)] private int lastseriesNum;    
+
     #endregion
 
     #region Constructors
@@ -107,6 +111,8 @@ namespace TvDatabase
       Series = (scheduleType > 0);
       StartTime = startTime;
       recommendedCard = -1;
+      lastseriesNum = 0;
+      lastepisodeNum = 0;
     }
 
     /// <summary> 
@@ -115,7 +121,17 @@ namespace TvDatabase
     public Schedule(int idChannel, int idParentSchedule, int scheduleType, string programName, DateTime startTime,
                     DateTime endTime,
                     int maxAirings, int priority, string directory, int quality, int keepMethod, DateTime keepDate,
-                    int preRecordInterval, int postRecordInterval, DateTime canceled)
+                    int preRecordInterval, int postRecordInterval, DateTime canceled) : 
+                    this(idChannel, idParentSchedule, scheduleType, programName, startTime,
+                    endTime, maxAirings, priority, directory, quality, keepMethod, keepDate,
+                    preRecordInterval, postRecordInterval, canceled, 0, 0)
+    {
+    }
+
+    public Schedule(int idChannel, int idParentSchedule, int scheduleType, string programName, DateTime startTime,
+                    DateTime endTime,
+                    int maxAirings, int priority, string directory, int quality, int keepMethod, DateTime keepDate,
+                    int preRecordInterval, int postRecordInterval, DateTime canceled, int lastseriesNum, int lastepisodeNum)
     {
       isChanged = true;
       this.idChannel = idChannel;
@@ -134,6 +150,8 @@ namespace TvDatabase
       this.postRecordInterval = postRecordInterval;
       this.canceled = canceled;
       this.series = (scheduleType > 0);
+      this.lastepisodeNum = lastepisodeNum;
+      this.lastseriesNum = lastseriesNum;
       recommendedCard = -1;
     }
 
@@ -159,6 +177,8 @@ namespace TvDatabase
       postRecordInterval = schedule.postRecordInterval;
       canceled = schedule.canceled;
       series = schedule.Series;
+      lastseriesNum = schedule.lastseriesNum;
+      lastepisodeNum = schedule.lastepisodeNum;
       recommendedCard = -1;
     }
 
@@ -169,7 +189,18 @@ namespace TvDatabase
     public Schedule(int idSchedule, int idParentSchedule, int idChannel, int scheduleType, string programName,
                     DateTime startTime,
                     DateTime endTime, int maxAirings, int priority, string directory, int quality, int keepMethod,
-                    DateTime keepDate, int preRecordInterval, int postRecordInterval, DateTime canceled)
+                    DateTime keepDate, int preRecordInterval, int postRecordInterval, DateTime canceled) :
+      this(idSchedule, idParentSchedule, idChannel, scheduleType, programName, startTime,
+                    endTime, maxAirings, priority, directory, quality, keepMethod,
+                    keepDate, preRecordInterval, postRecordInterval, canceled, 0, 0)
+    {
+    }
+
+    public Schedule(int idSchedule, int idParentSchedule, int idChannel, int scheduleType, string programName,
+                    DateTime startTime,
+                    DateTime endTime, int maxAirings, int priority, string directory, int quality, int keepMethod,
+                    DateTime keepDate, int preRecordInterval, int postRecordInterval, DateTime canceled,
+                    int lastseriesNum , int lastepisodeNum)
     {
       this.idSchedule = idSchedule;
       this.idParentSchedule = idParentSchedule;
@@ -188,6 +219,8 @@ namespace TvDatabase
       this.postRecordInterval = postRecordInterval;
       this.canceled = canceled;
       this.series = (scheduleType > 0);
+      this.lastseriesNum = lastseriesNum;
+      this.lastepisodeNum = lastepisodeNum;
       recommendedCard = -1;
     }
 
@@ -433,6 +466,32 @@ namespace TvDatabase
       }
     }
 
+    /// <summary>
+    /// Property relating to database column lastseasonNum
+    /// </summary>
+    public int LastseriesNum
+    {
+      get { return lastseriesNum; }
+      set
+      {
+        isChanged |= lastseriesNum != value;
+        lastseriesNum = value;
+      }
+    }
+
+    /// <summary>
+    /// Property relating to database column lastepisodeNum
+    /// </summary>
+    public int LastepisodeNum
+    {
+      get { return lastepisodeNum; }
+      set
+      {
+        isChanged |= lastepisodeNum != value;
+        lastepisodeNum = value;
+      }
+    }
+
     #endregion
 
     #region Storage and Retrieval
@@ -675,6 +734,10 @@ namespace TvDatabase
           progs = Program.RetrieveWeeklyEveryTimeOnThisChannel(schedule.startTime, schedule.endTime, schedule.programName, schedule.ReferencedChannel().IdChannel);
           break;
 
+        case (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+          progs = Program.RetrieveEveryTimeOnEveryChannelOnlyNewerEpisodesSchedules(schedule.programName, schedule.lastseriesNum, schedule.lastepisodeNum);
+          break;
+
         case (int)ScheduleRecordingType.Weekends:
           progs = Program.RetrieveWeekends(schedule.startTime, schedule.endTime, schedule.ReferencedChannel().IdChannel);
           break;
@@ -695,6 +758,7 @@ namespace TvDatabase
     {
       if (schedule.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnEveryChannel ||
           schedule.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnThisChannel ||
+          schedule.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes ||
           schedule.ScheduleType == (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel)
       {
         return false;
@@ -1057,6 +1121,19 @@ namespace TvDatabase
             return true;
           }
           break;
+        case ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+          if (program.Title == ProgramName && 
+              ((program.SeriesNumAsInt == lastseriesNum && program.EpisodeNumAsInt > lastepisodeNum) || 
+               (program.SeriesNumAsInt > lastseriesNum) || (lastseriesNum == 0 && lastepisodeNum == 0))
+            )
+          {
+            if (filterCanceledRecordings && IsSerieIsCanceled(program.StartTime))
+            {
+              return false;
+            }
+            return true;
+          }
+          break;
         case ScheduleRecordingType.EveryTimeOnThisChannel:
           if (program.Title == ProgramName && program.IdChannel == IdChannel)
           {
@@ -1340,7 +1417,7 @@ namespace TvDatabase
       Schedule schedule = new Schedule(IdChannel, idParentSchedule, scheduleType, ProgramName, StartTime, EndTime,
                                        MaxAirings, Priority,
                                        Directory, Quality, KeepMethod, KeepDate, PreRecordInterval, PostRecordInterval,
-                                       Canceled);
+                                       Canceled, lastepisodeNum, lastepisodeNum);
 
       schedule.series = series;
       schedule.idSchedule = idSchedule;
diff --git a/TvEngine3/TVLibrary/TVDatabase/TvBusinessLayer/BusinessLayer.cs b/TvEngine3/TVLibrary/TVDatabase/TvBusinessLayer/BusinessLayer.cs
index 95facc7..f8b0831 100644
--- a/TvEngine3/TVLibrary/TVDatabase/TvBusinessLayer/BusinessLayer.cs
+++ b/TvEngine3/TVLibrary/TVDatabase/TvBusinessLayer/BusinessLayer.cs
@@ -3013,6 +3013,33 @@ namespace TvDatabase
       }
 
       IList<Program> programs;
+      if (rec.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes)
+      {
+        programs = Program.RetrieveEveryTimeOnEveryChannelOnlyNewerEpisodesSchedules(rec.ProgramName, rec.LastseriesNum, rec.LastepisodeNum);
+
+        foreach (Program prog in programs)
+        {
+          if (rec.IsRecordingProgram(prog, false))
+          {
+            Schedule recNew = rec.Clone();
+            recNew.ScheduleType = (int)ScheduleRecordingType.Once;
+            recNew.IdChannel = prog.IdChannel;
+            recNew.StartTime = prog.StartTime;
+            recNew.EndTime = prog.EndTime;
+            recNew.LastseriesNum = prog.SeriesNumAsInt;
+            recNew.LastepisodeNum = prog.EpisodeNumAsInt;
+            recNew.Series = true;
+            if (rec.IsSerieIsCanceled(recNew.StartTime))
+            {
+              recNew.Canceled = recNew.StartTime;
+            }
+            recordings.Add(recNew);
+          }
+        }
+
+        return recordings;
+      }
+
       if (rec.ScheduleType == (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel)
       {
         //Log.Debug("get {0} {1} EveryTimeOnThisChannel", rec.ProgramName, rec.ReferencedChannel().Name);
diff --git a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVConflicts.cs b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVConflicts.cs
index 766c835..79de330 100644
--- a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVConflicts.cs
+++ b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVConflicts.cs
@@ -328,6 +328,10 @@ namespace TvPlugin
             item.Label = rec.ProgramName;
             item.Label2 = GUILocalizeStrings.Get(651);
             break;
+          case (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+            item.Label = rec.ProgramName;
+            item.Label2 = GUILocalizeStrings.Get(990002);
+            break;
         }
       }
     }
diff --git a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVPriorities.cs b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVPriorities.cs
index 2a7a3f5..b377ae7 100644
--- a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVPriorities.cs
+++ b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVPriorities.cs
@@ -402,6 +402,10 @@ namespace TvPlugin
             item.Label = rec.ProgramName;
             item.Label2 = GUILocalizeStrings.Get(651);
             break;
+          case ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+            item.Label = rec.ProgramName;
+            item.Label2 = GUILocalizeStrings.Get(990002);
+            break;
         }
       }
     }
@@ -590,6 +594,7 @@ namespace TvPlugin
         dlg.Add(GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.Record_WorkingDays)));
         dlg.Add(GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.Record_WeekendDays)));
         dlg.Add(GUILocalizeStrings.Get(990000));// 990000=Weekly everytime on this channel		
+        dlg.Add(GUILocalizeStrings.Get(990002));// 990002=Every channel but only newer episodes
         switch ((ScheduleRecordingType)rec.ScheduleType)
         {
           case ScheduleRecordingType.Once:
@@ -616,6 +621,9 @@ namespace TvPlugin
           case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:
             dlg.SelectedLabel = 7;
             break;
+          case ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+            dlg.SelectedLabel = 8;
+            break;
         }
         dlg.DoModal(GetID);
         if (dlg.SelectedLabel == -1)
@@ -656,6 +664,10 @@ namespace TvPlugin
             rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;
             rec.Canceled = Schedule.MinSchedule;
             break;
+          case 8://every time every channel but only new episodes
+            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes;
+            rec.Canceled = Schedule.MinSchedule;
+            break;
         }
         rec.Persist();
         TvServer server = new TvServer();
@@ -694,6 +706,9 @@ namespace TvPlugin
         case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:
           strType = GUILocalizeStrings.Get(990000);//Weekly Everytime on this channel
           break;
+        case ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+          strType = GUILocalizeStrings.Get(990002);//every time every channel but only newer episodes
+          break;
       }
       return strType;
     }
diff --git a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVProgramInfo.cs b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVProgramInfo.cs
index 258d424..5afb8ec 100644
--- a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVProgramInfo.cs
+++ b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVProgramInfo.cs
@@ -1077,8 +1077,9 @@ namespace TvPlugin
           || (schedule.ScheduleType == (int)ScheduleRecordingType.Weekly)
           || (schedule.ScheduleType == (int)ScheduleRecordingType.WorkingDays)
           || (schedule.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnEveryChannel)
+          || (schedule.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes)
           || (schedule.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnThisChannel)
-          || (schedule.ScheduleType == (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel))          
+          || (schedule.ScheduleType == (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel))          
       {
         GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_MENU);
         if (dlg == null)
@@ -1167,11 +1168,17 @@ namespace TvPlugin
       }
       else
       {
-        Log.Debug("TVProgramInfo.CreateProgram - no series schedule");
-        // no series schedule => create it
+        // series schedule => create it
         schedule = new Schedule(program.IdChannel, program.Title, program.StartTime, program.EndTime);
         schedule.PreRecordInterval = Int32.Parse(layer.GetSetting("preRecordInterval", "5").Value);
         schedule.PostRecordInterval = Int32.Parse(layer.GetSetting("postRecordInterval", "5").Value);
+        if ((int)scheduleType == (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes &&
+            program.SeriesNumAsInt > 0 && program.EpisodeNumAsInt > 0)
+        {
+          schedule.LastseriesNum = program.SeriesNumAsInt;
+          // -1 so that this schedule will also get recorded (SQL Rule is > X)
+          schedule.LastepisodeNum = program.EpisodeNumAsInt-1;
+        }
         schedule.ScheduleType = scheduleType;
       }
 
@@ -1319,6 +1326,7 @@ namespace TvPlugin
         dlg.Add(GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.Record_WorkingDays)));
         dlg.Add(GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.Record_WeekendDays)));
         dlg.AddLocalizedString(990000); // 990000=Weekly everytime on this channel
+        dlg.AddLocalizedString(990002); // 990002=Every time every channel but only new episodes
 
         dlg.DoModal(GetID);
         if (dlg.SelectedLabel == -1)
@@ -1353,6 +1361,9 @@ namespace TvPlugin
           case 7://Weekly everytime, this channel
             scheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;
             break;
+          case 8://every time every channel but only newer episodes
+            scheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes;
+            break;
         }
         CreateProgram(CurrentProgram, scheduleType, GetID);
 
diff --git a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVScheduler.cs b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVScheduler.cs
index 7e8cc7a..874551c 100644
--- a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVScheduler.cs
+++ b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVScheduler.cs
@@ -753,7 +753,10 @@ namespace TvPlugin
             case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:
               item.Label2 = GUILocalizeStrings.Get(651);
               break;
-           case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:
+            case (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+              item.Label2 = GUILocalizeStrings.Get(990002);
+              break;
+            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:
              switch (rec.StartTime.DayOfWeek)
              {
                  case DayOfWeek.Monday:
@@ -1079,6 +1082,9 @@ namespace TvPlugin
           case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:
             dlg.SelectedLabel = 7;
             break;
+          case ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+            dlg.SelectedLabel = 8;
+            break;
         }
         dlg.DoModal(GetID);
         if (dlg.SelectedLabel == -1)
@@ -1119,6 +1125,10 @@ namespace TvPlugin
             rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;
             rec.Canceled = Schedule.MinSchedule;
             break;
+          case 8://every time every channel but only newer episodes
+            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes;
+            rec.Canceled = Schedule.MinSchedule;
+            break;
         }
         rec.Persist();
         TvServer server = new TvServer();
@@ -1181,6 +1191,9 @@ namespace TvPlugin
         case ScheduleRecordingType.EveryTimeOnEveryChannel:
           strType = GUILocalizeStrings.Get(651); //Everytime on any channel
           break;
+        case ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+          strType = GUILocalizeStrings.Get(990002);
+          break;
         case ScheduleRecordingType.EveryTimeOnThisChannel:
           strType = String.Format(GUILocalizeStrings.Get(650), schedule.ReferencedChannel().DisplayName);
           ; //Everytime on this channel
diff --git a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVSearch.cs b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVSearch.cs
index 65e5330..604c882 100644
--- a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVSearch.cs
+++ b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TVSearch.cs
@@ -1200,6 +1200,7 @@ namespace TvPlugin
         dlg.Add(GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.Record_WorkingDays)));
         dlg.Add(GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.Record_WeekendDays)));
         dlg.Add(GUILocalizeStrings.Get(990000));  // 990000=Weekly everytime on this channel
+        dlg.Add(GUILocalizeStrings.Get(990002));  // 990002=Every time every channel but only newer episodes
 
         dlg.DoModal(GetID);
         if (dlg.SelectedLabel == -1)
@@ -1260,6 +1261,15 @@ namespace TvPlugin
           case 8://Weekly everytime, this channel
             rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;
             break;
+          case 9://every time every channel but only newer episodes
+            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes;
+            if (program.SeriesNumAsInt > 0 && program.EpisodeNumAsInt > 0)
+            {
+              // -1 so that this program gets also recorded
+              rec.LastseriesNum = program.SeriesNumAsInt;
+              rec.LastepisodeNum = program.EpisodeNumAsInt-1;
+            }
+            break;
         }
         rec.Persist();
         server.OnNewSchedule();
diff --git a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TvNewScheduleSearchType.cs b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TvNewScheduleSearchType.cs
index 60e7cc0..e1b0ff2 100644
--- a/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TvNewScheduleSearchType.cs
+++ b/TvEngine3/TVLibrary/TvPlugin/TvPlugin/TvNewScheduleSearchType.cs
@@ -300,7 +300,10 @@ namespace TvPlugin
           rec.ScheduleType = (int)ScheduleRecordingType.Weekends;
           break;
         case 7://everytime weekly, this channel
-          rec.ScheduleType = (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;
+          rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;
+          break;
+        case 8://everytime, all channels but only new episodes
+          rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes;
           break;
       }
 
diff --git a/TvEngine3/TVLibrary/TvService/DiskManagement/EpisodeManagement.cs b/TvEngine3/TVLibrary/TvService/DiskManagement/EpisodeManagement.cs
index aa3c889..177936f 100644
--- a/TvEngine3/TVLibrary/TvService/DiskManagement/EpisodeManagement.cs
+++ b/TvEngine3/TVLibrary/TvService/DiskManagement/EpisodeManagement.cs
@@ -59,8 +59,28 @@ namespace TvService
 
     public void OnScheduleEnded(string recordingFilename, Schedule recording, TvDatabase.Program program)
     {
-      Log.Write("diskmanagement: recording {0} ended. type:{1} max episodes:{2}",
-                program.Title, (ScheduleRecordingType)recording.ScheduleType, recording.MaxAirings);
+      Schedule parentrec = recording.ReferencedSchedule();
+      Log.Write("diskmanagement: recording {0} / {1} ended. type:{2} max episodes:{3} Endtime: {4}",
+                program.Title, recording.ProgramName, (ScheduleRecordingType)recording.ScheduleType, recording.MaxAirings, recording.EndTime.ToString());
+      if (parentrec != null)
+      {
+        Log.Write("diskmanagement: parent recording was {0} type:{1} S{2}E{3}",
+                  parentrec.ProgramName, (ScheduleRecordingType)parentrec.ScheduleType,
+                  program.SeriesNumAsInt, program.EpisodeNumAsInt);
+        // Update only series and episodedata for EveryTimeOnEveryChannelOnlyNewerEpisodes and only if the recording is complete
+        if ((ScheduleRecordingType)parentrec.ScheduleType == ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes &&
+             DateTime.Now >= recording.EndTime)
+        {
+          Log.Write("diskmanagement: Update series and episodedata for {0} type:{1} to: S{2}E{3}",
+                    parentrec.ProgramName, (ScheduleRecordingType)parentrec.ScheduleType,
+                    program.SeriesNumAsInt, program.EpisodeNumAsInt);
+
+          parentrec.LastseriesNum = program.SeriesNumAsInt;
+          parentrec.LastepisodeNum = program.EpisodeNumAsInt;
+          parentrec.Persist();
+
+        }
+      }
 
       CheckEpsiodesForRecording(recording, program);
     }
diff --git a/TvEngine3/TVLibrary/TvService/Scheduler/Scheduler.cs b/TvEngine3/TVLibrary/TvService/Scheduler/Scheduler.cs
index 3db7ca0..074b100 100644
--- a/TvEngine3/TVLibrary/TvService/Scheduler/Scheduler.cs
+++ b/TvEngine3/TVLibrary/TvService/Scheduler/Scheduler.cs
@@ -712,9 +712,14 @@ namespace TvService
         case ScheduleRecordingType.EveryTimeOnEveryChannel:
           isTimeToRecord = IsTimeToRecordEveryTimeOnEveryChannel(schedule);
           break;
+
         case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:
           isTimeToRecord = IsTimeToRecordWeeklyEveryTimeOnThisChannel(schedule, currentTime);
           break;
+
+        case ScheduleRecordingType.EveryTimeOnEveryChannelOnlyNewerEpisodes:
+          isTimeToRecord = IsTimeToRecordEveryTimeOnEveryChannelOnlyNewerEpisodes(schedule);
+          break;
       }
       return isTimeToRecord;
     }
@@ -750,6 +755,34 @@ namespace TvService
       return isTimeToRecord;
     }
 
+    private bool IsTimeToRecordEveryTimeOnEveryChannelOnlyNewerEpisodes(Schedule schedule)
+    {
+      bool isTimeToRecord = false;
+      bool createSpawnedOnceSchedule = false;
+
+      IList<TvDatabase.Program> programs = TvDatabase.Program.RetrieveCurrentRunningByTitle(schedule.ProgramName,
+                                                                                            schedule.PreRecordInterval,
+                                                                                            schedule.PostRecordInterval);
+      foreach (TvDatabase.Program program in programs)
+      {
+        if ((program.SeriesNumAsInt == schedule.LastseriesNum && program.EpisodeNumAsInt > schedule.LastepisodeNum) ||
+            (program.SeriesNumAsInt > schedule.LastseriesNum) || (schedule.LastseriesNum == 0 && schedule.LastepisodeNum == 0))
+        if (!schedule.IsSerieIsCanceled(program.StartTime))
+        {
+          if (CreateSpawnedOnceSchedule(schedule, program))
+          {
+            createSpawnedOnceSchedule = true;
+          }
+        }
+      }
+      if (createSpawnedOnceSchedule)
+      {
+        ResetTimer(); //lets process the spawned once schedule at once.
+      }
+
+      return isTimeToRecord;
+    }
+
     private bool IsTimeToRecordEveryTimeOnEveryChannel(Schedule schedule)
     {
       bool isTimeToRecord = false;
@@ -880,6 +913,9 @@ namespace TvService
           newSchedule.StartTime = current.StartTime;
           newSchedule.EndTime = current.EndTime;
           newSchedule.ScheduleType = 0; // type Once
+          // remove me? perhaps there is another way to get the correct series and episodenumbers?
+          newSchedule.LastseriesNum = current.SeriesNumAsInt;
+          newSchedule.LastepisodeNum = current.EpisodeNumAsInt;
           newSchedule.Series = true;
           newSchedule.IdParentSchedule = schedule.IdSchedule;
           newSchedule.Persist();
diff --git a/mediaportal/MediaPortal.Base/language/strings_de.xml b/mediaportal/MediaPortal.Base/language/strings_de.xml
index 1c46b91..138a9a6 100644
--- a/mediaportal/MediaPortal.Base/language/strings_de.xml
+++ b/mediaportal/MediaPortal.Base/language/strings_de.xml
@@ -1904,6 +1904,7 @@
     <String id="200021">TV-Konfiguration - EPG</String>
     <String id="990000">Wöchentlich an Tag X auf diesem Kanal</String>
     <String id="990001">{0} immer auf {1}</String>
+    <String id="990002">Immer nur neue Episoden</String>
     <String id="200022">MediaPortal hat folgende TV-Karten gefunden:</String>
     <String id="200023">Drücken sie den "Weiter" Knopf um die TV-Karten einzurichten</String>
     <String id="200024">TV-Konfiguration</String>
diff --git a/mediaportal/MediaPortal.Base/language/strings_en.xml b/mediaportal/MediaPortal.Base/language/strings_en.xml
index d77ee91..033e93c 100644
--- a/mediaportal/MediaPortal.Base/language/strings_en.xml
+++ b/mediaportal/MediaPortal.Base/language/strings_en.xml
@@ -1921,6 +1921,7 @@
     <String id="200021">TV Set-up - EPG</String>
     <String id="990000">Weekly on this channel</String>
     <String id="990001">{0} on channel {1}</String>
+    <String id="990002">Everytime new episodes</String>
     <String id="200022">MediaPortal has found the following TV cards:</String>
     <String id="200023">Press the Next button to configure these cards</String>
     <String id="200024">TV Set-up</String>
-- 
1.7.8.msysgit.0

